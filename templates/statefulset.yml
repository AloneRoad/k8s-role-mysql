apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  serviceName: mysql
  replicas: {{ mysql_replica_count }}
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
        - name: clone-mysql
          image: {{ xtrabackup_image }}
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Skip the clone if data already exists.
              [[ -d /var/lib/mysql/mysql ]] && exit 0
              # Skip the clone on master (ordinal index 0).
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              [[ $ordinal -eq 0 ]] && exit 0
              # Clone data from previous peer.
              ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
              # Prepare the backup.
              xtrabackup --prepare --user=${MYSQL_REPLICATION_USER} --password=${MYSQL_REPLICATION_PASSWORD} --target-dir=/var/lib/mysql
          env:
            - name: MYSQL_REPLICATION_USER
              value: {{ mysql_replication_user }}
            - name: MYSQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-replication-password
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
        - name: init-mysql
          image: {{ mysql_image }}
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Generate mysql server-id from pod ordinal index.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              # Copy server-id.conf adding offset to avoid reserved server-id=0 value.
              cat /mnt/config-map/server-id.cnf | sed s/@@SERVER_ID@@/$((100 + $ordinal))/g > /mnt/conf.d/server-id.cnf
              # Copy appropriate conf.d files from config-map to config mount.
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
              # Copy replication user script
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/create-replication-user.sql /mnt/scripts/create-replication-user.sql
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
            - name: scripts
              mountPath: /mnt/scripts
      containers:
        - name: mysql
          image: {{ mysql_image }}
          env:
            - name: MYSQL_DATABASE
              value: "{{ mysql_database | default('') }}"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-root-password
            - name: MYSQL_REPLICATION_USER
              value: "{{ mysql_replication_user }}"
            - name: MYSQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-replication-password
            - name: MYSQL_USER
              value: "{{ mysql_user }}"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-password
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          resources:
            {{ mysql_resources | to_nice_yaml(indent=2) | indent(12) }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - "-c"
                - mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              # Check we can execute queries over TCP (skip-networking is off).
              command:
                - /bin/sh
                - "-c"
                - MYSQL_PWD="${MYSQL_ROOT_PASSWORD}"
                - mysql -h 127.0.0.1 -u root -e "SELECT 1"
            initialDelaySeconds: 10
            timeoutSeconds: 1
        - name: xtrabackup
          image: {{ xtrabackup_image }}
          env:
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-root-password
            - name: MYSQL_REPLICATION_USER
              value: {{ mysql_replication_user }}
            - name: MYSQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-replication-password
          ports:
            - name: xtrabackup
              containerPort: 3307
          command:
            - bash
            - "-c"
            - |
              set -ex
              echo "Waiting for mysqld to be ready (accepting connections)"
              until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
              # Create replication user
              cd /mnt/scripts
              if [[ -f create-replication-user.sql  ]]; then
                cp create-replication-user.sql create-replication-user.orig.sql
                cat create-replication-user.sql \
                  | sed s/@@REPLICATION_USER@@/"${MYSQL_REPLICATION_USER}"/g \
                  | sed s/@@REPLICATION_PASSWORD@@/"${MYSQL_REPLICATION_PASSWORD}"/g \
                  | tee create-replication-user.sql
                mysql -h 127.0.0.1 --verbose < create-replication-user.sql
              fi
              cd /var/lib/mysql
              # Determine binlog position of cloned data, if any.
              if [[ -f xtrabackup_slave_info ]]; then
                # XtraBackup already generated a partial "CHANGE MASTER TO" query
                # because we're cloning from an existing slave.
                cp xtrabackup_slave_info change_master_to.sql.in
              elif [[ -f xtrabackup_binlog_info ]]; then
                # We're cloning directly from master. Parse binlog position.
                [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                      MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi
              # Check if we need to complete a clone by starting replication.
              if [[ -f change_master_to.sql.in ]]; then
                # In case of container restart, attempt this at-most-once.
                cp change_master_to.sql.in change_master_to.sql.orig
                mysql -h 127.0.0.1 --verbose<<EOF
                $(<change_master_to.sql.orig),
                MASTER_HOST='mysql-0.mysql',
                MASTER_USER='${MYSQL_REPLICATION_USER}',
                MASTER_PASSWORD='${MYSQL_REPLICATION_PASSWORD}',
                MASTER_CONNECT_RETRY=10;
                START SLAVE;
              EOF
              fi
              # Start a server to send backups when requested by peers.
              exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
                "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=${MYSQL_REPLICATION_USER} --password=${MYSQL_REPLICATION_PASSWORD}"
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
            - name: scripts
              mountPath: /mnt/scripts
          resources:
            requests:
              memory: 100Mi
              cpu: 100m
      volumes:
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql
        - name: scripts
          emptyDir: {}
        - name: data
          emptyDir: {}
  volumeClaimTemplates: